{
    "collab_server" : "",
    "contents" : "Genetic Lifespan Explorer\n========================================================\nauthor: Daniel Acker\ndate: 11/11/2017\nautosize: true\n\nGenetic lifespan dataset\n========================================================\n\n- Skene, Roy, and Grant (2017) quantified gene expression in mouse hippocampi sampled across the lifespan\n- The dataset covers both male and femle mice from two common laboratory strains\n  - C57Bl/6\n  - 129s5\n- The dataset revealed previously undiscovered age-dependent changes in Schizophrenia genes\n\n\nGenetic lifespan explorer app\n========================================================\n\n- The app allows users to search for their favorite genes in the dataset\n- Several genes can be queried simultaneously\n- New and interesting patterns can be found\n  - The gene SEMA4D encodes a transmembrane signalling protein (Sema4D) important for synapse development in early life. \n  - Exploring this dataset, I found that SEMA4D expression is tightly correlated with genes that encode Sema4D receptors (PLXNB1 & CD72)\n  - However, SEMA4D expression is anticorrelated with the related gene SEMA4A\n\nThree output modes\n========================================================\n\n- 1) Scatterplots to view changes in genes by age\n\n```{r, echo=FALSE}\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(reshape2)\nlibrary(ggplot2)\nlibrary(cowplot)\nlibrary(ggdendro)\nlibrary(gridExtra)\nlibrary(ggsci)\nlibrary(stringr)\nlibrary(randomForest)\nlibrary(caret)\ndf = readRDS(\"data.rds\")\n\ngenes = c(\"SEMA4D\", \"CD72\", \"PLXNB1\", \"SEMA4A\")\n\nselect_genes = function(df, gene_list) {\n  valid_gene_list = T\n  sapply(gene_list, function(gene) {\n    if (gene %in% df$TargetID == F) {\n      valid_gene_list <<- F\n      print(paste(\"Gene name\", gene, \"not found.\", sep=\" \"))\n    }\n  })\n  if (valid_gene_list == F) return(NULL)\n  return( subset(df, TargetID %in% gene_list) )\n}\n\nf1 = select_genes(df, genes) %>%\n  group_by(TargetID) %>%\n  mutate(normalized = scale(value/total_RNA) ) %>%\n  ungroup() %>%\n  ggplot(aes(Age, normalized, color=TargetID, fill=TargetID)) +\n  geom_point() +\n  geom_smooth(method=\"loess\", span=.5, alpha=.2) +\n  labs(x=\"Age [days]\", y=\"Signal / total signal\\n[z-score]\") +\n  theme(legend.title = element_blank()) +\n  scale_color_npg() +\n  scale_fill_npg()\n\nf2 = select_genes(df, genes) %>%\n  group_by(TargetID) %>%\n  mutate(normalized = scale(value/total_RNA) ) %>%\n  ungroup() %>%\n  ggplot(aes(Age, normalized, color=TargetID, fill=TargetID)) +\n  facet_grid(Strain~Sex, labeller=label_both) +\n  geom_point() +\n  geom_smooth(method=\"loess\", span=.5, alpha=.2) +\n  labs(x=\"Age [days]\", y=\"Signal / total signal\\n[z-score]\") +\n  theme(legend.title = element_blank()) +\n  scale_color_npg() +\n  scale_fill_npg()\n\ngrid.arrange(f1, f2)\n```\n\nThree output modes\n========================================================\n\n- 2) Correlation matrices and dendrograms to track similarity in expression patterns\n\n```{r, echo=F}\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(reshape2)\nlibrary(ggplot2)\nlibrary(cowplot)\nlibrary(ggdendro)\nlibrary(gridExtra)\nlibrary(ggsci)\nlibrary(stringr)\nlibrary(randomForest)\nlibrary(caret)\ndf = readRDS(\"data.rds\")\n\ngenes = c(\"SEMA4D\", \"CD72\", \"PLXNB1\", \"SEMA4A\")\n\nselect_genes = function(df, gene_list) {\n  valid_gene_list = T\n  sapply(gene_list, function(gene) {\n    if (gene %in% df$TargetID == F) {\n      valid_gene_list <<- F\n      print(paste(\"Gene name\", gene, \"not found.\", sep=\" \"))\n    }\n  })\n  if (valid_gene_list == F) return(NULL)\n  return( subset(df, TargetID %in% gene_list) )\n}\n\np = select_genes(df, genes) %>%\n  group_by(TargetID) %>%\n  mutate(normalized = scale(value/total_RNA) ) %>%\n  ungroup() %>%\n  select(variable, TargetID, normalized) %>%\n  spread(TargetID, normalized) %>%\n  {.[,sapply(names(.), function(name) name %in% genes)]} %>%\n  cor() %>%\n  melt() %>%\n  ggplot(aes(Var1, Var2, fill=value)) +\n  geom_tile() +\n  labs(fill=\"Correlation\") +\n  theme(\n    axis.title = element_blank(),\n    axis.text.x = element_text(angle=90, vjust=.5),\n    legend.position = \"top\"\n    ) +\n  scale_fill_gradient2(low=\"blue\", mid=\"white\", high=\"red\", midpoint=0, \n                       limits=c(-1,1), breaks=c(-1,0,1)) +\n  coord_equal()\n\nclust = select_genes(df, genes) %>%\n  group_by(TargetID) %>%\n  mutate(normalized = scale(value/total_RNA) ) %>%\n  ungroup() %>%\n  select(variable, TargetID, normalized) %>%\n  spread(TargetID, normalized) %>%\n  {.[,sapply(names(.), function(name) name %in% genes)]} %>%\n  cor() %>%\n  dist() %>%\n  hclust()\n\ndendro = ggdendrogram(clust, size = 2, rotate = T) + ggtitle(\"Similarity\")\n\ng = grid.arrange(dendro, p, layout_matrix=rbind(c(1, 2)))\nprint(g)\n```\n\n\nThree output modes\n========================================================\n\n- 3) Predictivity plots to show how well a gene or set of genes can be used to predict a mouse's age\n  - Normalized expression data is fit using a random forest model\n  - Displayed results represent out of sample predictions on a test dataset withheld during model training\n\n```{r, echo=F, fig.height=4, fig.width=10}\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(reshape2)\nlibrary(ggplot2)\nlibrary(cowplot)\nlibrary(ggdendro)\nlibrary(gridExtra)\nlibrary(ggsci)\nlibrary(stringr)\nlibrary(randomForest)\nlibrary(caret)\ndf = readRDS(\"data.rds\")\n\ngenes = c(\"SEMA4D\", \"CD72\", \"PLXNB1\", \"SEMA4A\")\n\nselect_genes = function(df, gene_list) {\n  valid_gene_list = T\n  sapply(gene_list, function(gene) {\n    if (gene %in% df$TargetID == F) {\n      valid_gene_list <<- F\n      print(paste(\"Gene name\", gene, \"not found.\", sep=\" \"))\n    }\n  })\n  if (valid_gene_list == F) return(NULL)\n  return( subset(df, TargetID %in% gene_list) )\n}\n\nX_data = select_genes(df, genes) %>%\n  group_by(TargetID) %>%\n  mutate(normalized = scale(value/total_RNA) ) %>%\n  ungroup() %>%\n  select(variable, TargetID, normalized, Age) %>%\n  dcast(variable+Age~TargetID, value.var=\"normalized\")\n\ntrain_idx = createDataPartition(X_data$Age, p=.6, list=F)\ntrain_data = X_data[train_idx,]\ntest_data = X_data[-train_idx,]\n\nrf = randomForest(x=select(train_data, -Age, -variable), y=train_data$Age, importance=T)\ntest_y = predict(rf, newdata = select(test_data, -Age, -variable))\n\np1 = qplot(test_data$Age, test_y) +\n  #geom_smooth(method=\"loess\", span=.5) +\n  xlab(\"True age [days]\") +\n  ylab(\"Fitted age [days]\") +\n  geom_smooth()\n\np2 = rf$importance[,1] %>%\n  melt() %>%\n  mutate(Gene=rownames(.)) %>%\n  mutate(value=scales::rescale(value, to=c(.1,1))) %>%\n  mutate(Total=sum(value)) %>%\n  mutate(`Relative importance`=value/Total) %>%\n  ggplot(aes(reorder(Gene, -`Relative importance`), `Relative importance`)) +\n  geom_bar(stat=\"identity\") +\n  theme(\n    axis.text.x = element_text(angle=90, vjust=.5),\n    axis.title.x = element_blank()\n    )\n\ngrid.arrange(p1, p2, nrow=1)\n```\n\n",
    "created" : 1510417829884.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3160754935",
    "id" : "77F7E894",
    "lastKnownWriteTime" : 1510420081,
    "last_content_update" : 1510420081637,
    "path" : "~/Desktop/Developing-data-products/Week-4-Project/presentation.Rpres",
    "project_path" : "presentation.Rpres",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_presentation"
}