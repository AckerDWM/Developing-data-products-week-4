{
    "collab_server" : "",
    "contents" : "library(shiny)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(reshape2)\nlibrary(ggplot2)\nlibrary(cowplot)\nlibrary(ggdendro)\nlibrary(gridExtra)\nlibrary(ggsci)\nlibrary(stringr)\nlibrary(randomForest)\nlibrary(caret)\ndf = readRDS(\"data.rds\")\n\nselect_genes = function(df, gene_list) {\n  valid_gene_list = T\n  sapply(gene_list, function(gene) {\n    if (gene %in% df$TargetID == F) {\n      valid_gene_list <<- F\n      print(paste(\"Gene name\", gene, \"not found.\", sep=\" \"))\n    }\n  })\n  if (valid_gene_list == F) return(NULL)\n  return( subset(df, TargetID %in% gene_list) )\n}\n\n# Define server logic required to draw a histogram\nshinyServer(function(input, output) {\n  \n  output$Plot <- renderPlot({\n    \n    chart_type = input$chart_type\n    \n    genes = input$caption %>%\n        str_to_upper() %>%\n        str_split(\",\") %>%\n        sapply(str_trim, side=\"both\") %>%\n        c()\n    \n    if (chart_type == \"Lifespan charts\") {\n\n      f1 = select_genes(df, genes) %>%\n        group_by(TargetID) %>%\n        mutate(normalized = scale(value/total_RNA) ) %>%\n        ungroup() %>%\n        ggplot(aes(Age, normalized, color=TargetID, fill=TargetID)) +\n        geom_point() +\n        geom_smooth(method=\"loess\", span=.5, alpha=.2) +\n        labs(x=\"Age [days]\", y=\"Signal / total signal\\n[z-score]\") +\n        theme(legend.title = element_blank()) +\n        scale_color_npg() +\n        scale_fill_npg()\n      \n      f2 = select_genes(df, genes) %>%\n        group_by(TargetID) %>%\n        mutate(normalized = scale(value/total_RNA) ) %>%\n        ungroup() %>%\n        ggplot(aes(Age, normalized, color=TargetID, fill=TargetID)) +\n        facet_grid(Strain~Sex, labeller=label_both) +\n        geom_point() +\n        geom_smooth(method=\"loess\", span=.5, alpha=.2) +\n        labs(x=\"Age [days]\", y=\"Signal / total signal\\n[z-score]\") +\n        theme(legend.title = element_blank()) +\n        scale_color_npg() +\n        scale_fill_npg()\n      \n      grid.arrange(f1, f2)\n    } \n    \n    if (chart_type == \"Correlation matrix\") {\n      \n      p = select_genes(df, genes) %>%\n        group_by(TargetID) %>%\n        mutate(normalized = scale(value/total_RNA) ) %>%\n        ungroup() %>%\n        select(variable, TargetID, normalized) %>%\n        spread(TargetID, normalized) %>%\n        {.[,sapply(names(.), function(name) name %in% genes)]} %>%\n        cor() %>%\n        melt() %>%\n        ggplot(aes(Var1, Var2, fill=value)) +\n        geom_tile() +\n        labs(fill=\"Correlation\") +\n        theme(\n          axis.title = element_blank(),\n          axis.text.x = element_text(angle=90, vjust=.5),\n          legend.position = \"top\"\n          ) +\n        scale_fill_gradient2(low=\"blue\", mid=\"white\", high=\"red\", midpoint=0, \n                             limits=c(-1,1), breaks=c(-1,0,1)) +\n        coord_equal()\n      \n      clust = select_genes(df, genes) %>%\n        group_by(TargetID) %>%\n        mutate(normalized = scale(value/total_RNA) ) %>%\n        ungroup() %>%\n        select(variable, TargetID, normalized) %>%\n        spread(TargetID, normalized) %>%\n        {.[,sapply(names(.), function(name) name %in% genes)]} %>%\n        cor() %>%\n        dist() %>%\n        hclust()\n      \n      dendro = ggdendrogram(clust, size = 2, rotate = T) + ggtitle(\"Similarity\")\n      \n      g = grid.arrange(dendro, p, layout_matrix=rbind(c(1, 2)))\n      print(g)\n      \n    }\n    \n    if (chart_type == \"Predictivity charts\") {\n      \n      X_data = select_genes(df, genes) %>%\n        group_by(TargetID) %>%\n        mutate(normalized = scale(value/total_RNA) ) %>%\n        ungroup() %>%\n        select(variable, TargetID, normalized, Age) %>%\n        dcast(variable+Age~TargetID, value.var=\"normalized\")\n      \n      train_idx = createDataPartition(X_data$Age, p=.6, list=F)\n      train_data = X_data[train_idx,]\n      test_data = X_data[-train_idx,]\n      \n      rf = randomForest(x=select(train_data, -Age, -variable), y=train_data$Age, importance=T)\n      test_y = predict(rf, newdata = select(test_data, -Age, -variable))\n      \n      p1 = qplot(test_data$Age, test_y) +\n        #geom_smooth(method=\"loess\", span=.5) +\n        xlab(\"True age [days]\") +\n        ylab(\"Fitted age [days]\") +\n        geom_smooth()\n      \n      p2 = rf$importance[,1] %>%\n        melt() %>%\n        mutate(Gene=rownames(.)) %>%\n        mutate(value=scales::rescale(value, to=c(.1,1))) %>%\n        mutate(Total=sum(value)) %>%\n        mutate(`Relative importance`=value/Total) %>%\n        ggplot(aes(reorder(Gene, -`Relative importance`), `Relative importance`)) +\n        geom_bar(stat=\"identity\") +\n        theme(\n          axis.text.x = element_text(angle=90, vjust=.5),\n          axis.title.x = element_blank()\n          )\n      \n      grid.arrange(p1, p2, nrow=1)\n      \n    }\n    \n  })\n  \n})\n",
    "created" : 1510337675359.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2539329765",
    "id" : "3C1C9C1A",
    "lastKnownWriteTime" : 1510416531,
    "last_content_update" : 1510416531617,
    "path" : "~/Desktop/Developing-data-products/Week-4-Project/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}