library(shiny)
library(dplyr)
library(tidyr)
library(reshape2)
library(ggplot2)
library(cowplot)
library(ggdendro)
library(gridExtra)
library(ggsci)
library(stringr)
library(randomForest)
library(caret)
attach("genes_by_age_and_strain")
dim(df)
head(df)
filter(df, is.na(total_RNA))
filter(df, is.na(value))
1
?grepl
df %>%
filter(grepl("[A-Z]+", TargetID))
df %>%
filter(grepl("^[A-Za-z]", TargetID))
dim(df)
df %>%
filter(grepl("^[A-Za-z]+2", TargetID))
df %>%
filter(grepl("^[A-Za-z][A-Za-z]", TargetID))
factor(df$TargetID)
filter(df, TargetID=="01-Mar")
filter(df, TargetID=="01-Mar") %>%
ggplot(Age, value/total_RNA) +
geom_point()
filter(df, TargetID=="01-Mar")
filter(df, TargetID=="01-Mar") %>%
ggplot(aes(Age, value/total_RNA)) +
geom_point()
filter(df, TargetID=="02-Mar") %>%
ggplot(aes(Age, value/total_RNA)) +
geom_point()
filter(df, TargetID=="03-Mar") %>%
ggplot(aes(Age, value/total_RNA)) +
geom_point()
filter(df, TargetID=="03-April") %>%
ggplot(aes(Age, value/total_RNA)) +
geom_point()
filter(df, TargetID=="03-Apr") %>%
ggplot(aes(Age, value/total_RNA)) +
geom_point()
filter(df, TargetID=="03-May") %>%
ggplot(aes(Age, value/total_RNA)) +
geom_point()
filter(df, TargetID=="03-Mar") %>%
ggplot(aes(Age, value/total_RNA)) +
geom_point()
filter(df, TargetID=="04-Mar") %>%
ggplot(aes(Age, value/total_RNA)) +
geom_point()
setwd("/Users/danielacker/Desktop/Lifespan-Transcriptome/E-MTAB-3256.raw.1")
setwd("/Users/danielacker/Desktop/Lifespan-Transcriptome/E-MTAB-3256.raw.1")
df = read.csv("ProbeProfile_Repeats_WT.txt")
df
df$TargetID
head(df)
getwd()
mystorefile = "data.rds"
saveRDS(df, file = mystorefile)
x <- readRDS(mystorefile)
x
shiny::runApp()
df = readRDS("data.rds")
df
attach("genes_by_age_and_strain")
head(df)
df = readRDS("data.rds")
head(df)
df = readRDS("data.rds")
head(df)
df %>%
filter(grepl("^[A-Za-z][A-Za-z]", TargetID))
attach("genes_by_age_and_strain")
df %>%
filter(grepl("^[A-Za-z][A-Za-z]", TargetID))
getwd()
df = readRDS("data.rds")
head(df)
runApp()
runApp()
genes = c(SEMA4D, CD72, PLXNB1, SEMA4A)
X_data = select_genes(df, genes) %>%
group_by(TargetID) %>%
mutate(normalized = scale(value/total_RNA) ) %>%
ungroup() %>%
select(variable, TargetID, normalized, Age) %>%
dcast(variable+Age~TargetID, value.var="normalized")
train_idx = createDataPartition(X_data$Age, p=.6, list=F)
train_data = X_data[train_idx,]
test_data = X_data[-train_idx,]
rf = randomForest(x=select(train_data, -Age, -variable), y=train_data$Age, importance=T)
test_y = predict(rf, newdata = select(test_data, -Age, -variable))
p1 = qplot(test_data$Age, test_y) +
#geom_smooth(method="loess", span=.5) +
xlab("True age [days]") +
ylab("Fitted age [days]") +
geom_smooth()
p2 = rf$importance[,1] %>%
melt() %>%
mutate(Gene=rownames(.)) %>%
mutate(value=scales::rescale(value, to=c(.1,1))) %>%
mutate(Total=sum(value)) %>%
mutate(`Relative importance`=value/Total) %>%
ggplot(aes(reorder(Gene, -`Relative importance`), `Relative importance`)) +
geom_bar(stat="identity") +
theme(
axis.text.x = element_text(angle=90, vjust=.5),
axis.title.x = element_blank()
)
grid.arrange(p1, p2, nrow=1)
genes = c("SEMA4D", "CD72", "PLXNB1", "SEMA4A")
X_data = select_genes(df, genes) %>%
group_by(TargetID) %>%
mutate(normalized = scale(value/total_RNA) ) %>%
ungroup() %>%
select(variable, TargetID, normalized, Age) %>%
dcast(variable+Age~TargetID, value.var="normalized")
train_idx = createDataPartition(X_data$Age, p=.6, list=F)
train_data = X_data[train_idx,]
test_data = X_data[-train_idx,]
rf = randomForest(x=select(train_data, -Age, -variable), y=train_data$Age, importance=T)
test_y = predict(rf, newdata = select(test_data, -Age, -variable))
p1 = qplot(test_data$Age, test_y) +
#geom_smooth(method="loess", span=.5) +
xlab("True age [days]") +
ylab("Fitted age [days]") +
geom_smooth()
p2 = rf$importance[,1] %>%
melt() %>%
mutate(Gene=rownames(.)) %>%
mutate(value=scales::rescale(value, to=c(.1,1))) %>%
mutate(Total=sum(value)) %>%
mutate(`Relative importance`=value/Total) %>%
ggplot(aes(reorder(Gene, -`Relative importance`), `Relative importance`)) +
geom_bar(stat="identity") +
theme(
axis.text.x = element_text(angle=90, vjust=.5),
axis.title.x = element_blank()
)
grid.arrange(p1, p2, nrow=1)
genes = c("SEMA4D", "CD72", "PLXNB1", "SEMA4A")
select_genes(df, genes)
genes = c("SEMA4D", "CD72", "PLXNB1", "SEMA4A")
select_genes = function(df, gene_list) {
valid_gene_list = T
sapply(gene_list, function(gene) {
if (gene %in% df$TargetID == F) {
valid_gene_list <<- F
print(paste("Gene name", gene, "not found.", sep=" "))
}
})
if (valid_gene_list == F) return(NULL)
return( subset(df, TargetID %in% gene_list) )
}
X_data = select_genes(df, genes) %>%
group_by(TargetID) %>%
mutate(normalized = scale(value/total_RNA) ) %>%
ungroup() %>%
select(variable, TargetID, normalized, Age) %>%
dcast(variable+Age~TargetID, value.var="normalized")
train_idx = createDataPartition(X_data$Age, p=.6, list=F)
train_data = X_data[train_idx,]
test_data = X_data[-train_idx,]
rf = randomForest(x=select(train_data, -Age, -variable), y=train_data$Age, importance=T)
test_y = predict(rf, newdata = select(test_data, -Age, -variable))
p1 = qplot(test_data$Age, test_y) +
#geom_smooth(method="loess", span=.5) +
xlab("True age [days]") +
ylab("Fitted age [days]") +
geom_smooth()
p2 = rf$importance[,1] %>%
melt() %>%
mutate(Gene=rownames(.)) %>%
mutate(value=scales::rescale(value, to=c(.1,1))) %>%
mutate(Total=sum(value)) %>%
mutate(`Relative importance`=value/Total) %>%
ggplot(aes(reorder(Gene, -`Relative importance`), `Relative importance`)) +
geom_bar(stat="identity") +
theme(
axis.text.x = element_text(angle=90, vjust=.5),
axis.title.x = element_blank()
)
grid.arrange(p1, p2, nrow=1)
library(shiny)
library(dplyr)
library(tidyr)
library(reshape2)
library(ggplot2)
library(cowplot)
library(ggdendro)
library(gridExtra)
library(ggsci)
library(stringr)
library(randomForest)
library(caret)
df = readRDS("data.rds")
genes = c("SEMA4D", "CD72", "PLXNB1", "SEMA4A")
select_genes = function(df, gene_list) {
valid_gene_list = T
sapply(gene_list, function(gene) {
if (gene %in% df$TargetID == F) {
valid_gene_list <<- F
print(paste("Gene name", gene, "not found.", sep=" "))
}
})
if (valid_gene_list == F) return(NULL)
return( subset(df, TargetID %in% gene_list) )
}
X_data = select_genes(df, genes) %>%
group_by(TargetID) %>%
mutate(normalized = scale(value/total_RNA) ) %>%
ungroup() %>%
select(variable, TargetID, normalized, Age) %>%
dcast(variable+Age~TargetID, value.var="normalized")
train_idx = createDataPartition(X_data$Age, p=.6, list=F)
train_data = X_data[train_idx,]
test_data = X_data[-train_idx,]
rf = randomForest(x=select(train_data, -Age, -variable), y=train_data$Age, importance=T)
test_y = predict(rf, newdata = select(test_data, -Age, -variable))
p1 = qplot(test_data$Age, test_y) +
#geom_smooth(method="loess", span=.5) +
xlab("True age [days]") +
ylab("Fitted age [days]") +
geom_smooth()
p2 = rf$importance[,1] %>%
melt() %>%
mutate(Gene=rownames(.)) %>%
mutate(value=scales::rescale(value, to=c(.1,1))) %>%
mutate(Total=sum(value)) %>%
mutate(`Relative importance`=value/Total) %>%
ggplot(aes(reorder(Gene, -`Relative importance`), `Relative importance`)) +
geom_bar(stat="identity") +
theme(
axis.text.x = element_text(angle=90, vjust=.5),
axis.title.x = element_blank()
)
grid.arrange(p1, p2, nrow=1)
library(dplyr)
library(tidyr)
library(reshape2)
library(ggplot2)
library(cowplot)
library(ggdendro)
library(gridExtra)
library(ggsci)
library(stringr)
library(randomForest)
library(caret)
df = readRDS("data.rds")
genes = c("SEMA4D", "CD72", "PLXNB1", "SEMA4A")
select_genes = function(df, gene_list) {
valid_gene_list = T
sapply(gene_list, function(gene) {
if (gene %in% df$TargetID == F) {
valid_gene_list <<- F
print(paste("Gene name", gene, "not found.", sep=" "))
}
})
if (valid_gene_list == F) return(NULL)
return( subset(df, TargetID %in% gene_list) )
}
X_data = select_genes(df, genes) %>%
group_by(TargetID) %>%
mutate(normalized = scale(value/total_RNA) ) %>%
ungroup() %>%
select(variable, TargetID, normalized, Age) %>%
dcast(variable+Age~TargetID, value.var="normalized")
train_idx = createDataPartition(X_data$Age, p=.6, list=F)
train_data = X_data[train_idx,]
test_data = X_data[-train_idx,]
rf = randomForest(x=select(train_data, -Age, -variable), y=train_data$Age, importance=T)
test_y = predict(rf, newdata = select(test_data, -Age, -variable))
p1 = qplot(test_data$Age, test_y) +
#geom_smooth(method="loess", span=.5) +
xlab("True age [days]") +
ylab("Fitted age [days]") +
geom_smooth()
p2 = rf$importance[,1] %>%
melt() %>%
mutate(Gene=rownames(.)) %>%
mutate(value=scales::rescale(value, to=c(.1,1))) %>%
mutate(Total=sum(value)) %>%
mutate(`Relative importance`=value/Total) %>%
ggplot(aes(reorder(Gene, -`Relative importance`), `Relative importance`)) +
geom_bar(stat="identity") +
theme(
axis.text.x = element_text(angle=90, vjust=.5),
axis.title.x = element_blank()
)
grid.arrange(p1, p2, nrow=1)
library(dplyr)
library(tidyr)
library(reshape2)
library(ggplot2)
library(cowplot)
library(ggdendro)
library(gridExtra)
library(ggsci)
library(stringr)
library(randomForest)
library(caret)
df = readRDS("data.rds")
genes = c("SEMA4D", "CD72", "PLXNB1", "SEMA4A")
select_genes = function(df, gene_list) {
valid_gene_list = T
sapply(gene_list, function(gene) {
if (gene %in% df$TargetID == F) {
valid_gene_list <<- F
print(paste("Gene name", gene, "not found.", sep=" "))
}
})
if (valid_gene_list == F) return(NULL)
return( subset(df, TargetID %in% gene_list) )
}
f1 = select_genes(df, genes) %>%
group_by(TargetID) %>%
mutate(normalized = scale(value/total_RNA) ) %>%
ungroup() %>%
ggplot(aes(Age, normalized, color=TargetID, fill=TargetID)) +
geom_point() +
geom_smooth(method="loess", span=.5, alpha=.2) +
labs(x="Age [days]", y="Signal / total signal\n[z-score]") +
theme(legend.title = element_blank()) +
scale_color_npg() +
scale_fill_npg()
f2 = select_genes(df, genes) %>%
group_by(TargetID) %>%
mutate(normalized = scale(value/total_RNA) ) %>%
ungroup() %>%
ggplot(aes(Age, normalized, color=TargetID, fill=TargetID)) +
facet_grid(Strain~Sex, labeller=label_both) +
geom_point() +
geom_smooth(method="loess", span=.5, alpha=.2) +
labs(x="Age [days]", y="Signal / total signal\n[z-score]") +
theme(legend.title = element_blank()) +
scale_color_npg() +
scale_fill_npg()
grid.arrange(f1, f2)
library(dplyr)
library(tidyr)
library(reshape2)
library(ggplot2)
library(cowplot)
library(ggdendro)
library(gridExtra)
library(ggsci)
library(stringr)
library(randomForest)
library(caret)
df = readRDS("data.rds")
genes = c("SEMA4D", "CD72", "PLXNB1", "SEMA4A")
select_genes = function(df, gene_list) {
valid_gene_list = T
sapply(gene_list, function(gene) {
if (gene %in% df$TargetID == F) {
valid_gene_list <<- F
print(paste("Gene name", gene, "not found.", sep=" "))
}
})
if (valid_gene_list == F) return(NULL)
return( subset(df, TargetID %in% gene_list) )
}
X_data = select_genes(df, genes) %>%
group_by(TargetID) %>%
mutate(normalized = scale(value/total_RNA) ) %>%
ungroup() %>%
select(variable, TargetID, normalized, Age) %>%
dcast(variable+Age~TargetID, value.var="normalized")
